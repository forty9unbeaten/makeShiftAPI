openapi: 3.0.1
info:
  title: MakeShift API
  version: "1.0.0"
servers:
  - url: http://localhost:3000/
    description: localhost
  - url: https://printcatalog-capstone.herokuapp.com/
    description: Production Server
components:
  schemas:
    Product:
      allOf:
        - type: object
          properties:
            productId:
              type: integer
              format: int32
              minimum: 1
            productName:
              type: string
              minLength: 2
              maxLength: 50
            productDescription:
              type: string
              maxLength: 255
            productImgs:
              type: array
              items:
                type: string
            productCategory:
              type: string
              minLength: 2
              maxLength: 50
            createdBy:
              $ref: "#/components/schemas/username"
            ratingsCount:
              type: integer
              format: int32
          required:
            - productId
            - productName
            - productDescription
            - productImgs
            - productCategory
        - $ref: "#/components/schemas/ratings"
        - $ref: "#/components/schemas/comments"
    User:
      allOf:
        - type: object
          properties:
            userId:
              type: integer
              format: int32
              minimum: 1
            username:
              $ref: "#/components/schemas/username"
            firstName:
              $ref: "#/components/schemas/firstName"
            lastName:
              $ref: "#/components/schemas/lastName"
            email:
              type: string
              format: email_address
            bio:
              $ref: "#/components/schemas/bio"
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            photo:
              type: string
          required:
            - id
            - username
            - firstName
            - lastName
            - email
            - bio
            - createdAt
            - updatedAt
            - photo
    OperationalError:
      allOf:
        - type: object
          properties:
            message:
              type: string
          required:
            - message
        - $ref: "#/components/schemas/errorStatusCode"
    errorStatusCode:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          minimum: 400
          maximum: 599
      required:
        - statusCode
    successStatusCode:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          minimum: 200
          maximum: 399
      required:
        - statusCode
    username:
      type: string
      minLength: 4
      maxLength: 25
    password:
      type: string
      minLength: 6
      maxLength: 20
    firstName:
      type: string
      minLength: 1
      maxLength: 40
    lastName:
      type: string
      minLength: 1
      maxLength: 40
    bio:
      type: string
      maxLength: 255
    ratings:
      type: object
      properties:
        ratings:
          type: array
          items:
            type: object
            properties:
              username:
                $ref: "#/components/schemas/username"
              rating:
                type: integer
                format: int32
                minimum: 1
                maximum: 5
        ratingsCount:
          type: integer
          format: int32
      required:
        - ratings
        - ratingsCount
    comments:
      type: object
      properties:
        comments:
          type: array
          items:
            type: object
            properties:
              commentId:
                type: integer
                format: int32
                minimum: 1
              username:
                $ref: "#/components/schemas/username"
              comment:
                type: string
                minLength: 1
                maxLength: 255
              createdAt:
                type: string
                format: date-time
            required:
              - commentId
              - username
              - comment
        commentsCount:
          type: integer
          format: int32
      required:
        - comments
        - commentsCount
  responses:
    401:
      description: Unauthorized to Make Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OperationalError"
      headers:
        Authenticate:
          description: Includes the URI to receive a token
          required: true
          schema:
            type: string
paths:
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - username
                - password
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      username:
                        $ref: "#/components/schemas/username"
                      token:
                        type: string
                    required:
                      - username
                      - token
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /auth/logout:
    get:
      summary: User logout
      tags:
        - Authentication
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                  - $ref: "#/components/schemas/successStatusCode"
        "401":
          $ref: "#/components/responses/401"
  /users:
    get:
      summary: retrieve list of all users
      tags:
        - Users
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                    required:
                      - users
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    post:
      summary: create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                password:
                  $ref: "#/components/schemas/password"
                email:
                  type: string
                  format: email_address
                firstName:
                  $ref: "#/components/schemas/firstName"
                lastName:
                  $ref: "#/components/schemas/lastName"
              required:
                - username
                - password
                - email
                - firstName
                - lastName
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        allOf:
                          - type: object
                          - $ref: "#/components/schemas/User"
                    required:
                      - user
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /users/{username}:
    get:
      summary: retrieve a user's information
      tags:
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user to retrieve
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        allOf:
                          - type: object
                          - $ref: "#/components/schemas/User"
                    required:
                      - user
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    patch:
      summary: modify a user's information
      tags:
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user to modify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                email:
                  type: string
                  format: email_address
                firstName:
                  $ref: "#/components/schemas/firstName"
                lastName:
                  $ref: "#/components/schemas/lastName"
                bio:
                  $ref: "#/components/schemas/bio"
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        allOf:
                          - type: object
                          - $ref: "#/components/schemas/User"
                    required:
                      - user
                  - $ref: "#/components/schemas/successStatusCode"
        "401":
          $ref: "#/components/responses/401"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    delete:
      summary: delete a user
      tags:
        - Users
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user to delete
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  statusCode:
                    type: integer
                required:
                  - username
                  - statusCode
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /users/{username}/photo:
    put:
      summary: Update a user's profile photo
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to update
      requestBody:
        required: true
        description: Photo data with an extension of either .jpg, .png or .gif...FILE SIZE LIMITED TO 400KB
        content:
          multipart/formData:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
              required:
                - photo
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      photo:
                        type: string
                        format: binary
                    required:
                      - photo
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "413":
          description: File Size Too Large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "415":
          description: Unsupported Data Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /products:
    get:
      summary: retrieve list of all products in catalog
      tags:
        - Products
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    post:
      summary: add a new product to catalog
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName:
                  type: string
                productDescription:
                  type: string
                productCategory:
                  type: string
              required:
                - productName
                - productCategory
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      product:
                        allOf:
                          - type: object
                          - $ref: "#/components/schemas/Product"
                    required:
                      - product
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
  /products/{productId}:
    get:
      summary: retrieve a product
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to retrieve
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      product:
                        allOf:
                          - type: object
                          - $ref: "#/components/schemas/Product"
                    required:
                      - product
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    patch:
      summary: modify a product
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to modify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName:
                  type: string
                productDescription:
                  type: string
                productCategory:
                  type: string
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      product:
                        allOf:
                          - type: object
                          - $ref: "#/components/schemas/Product"
                    required:
                      - product
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    delete:
      summary: delete a product
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to delete
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      productName:
                        type: string
                        minLength: 2
                        maxLength: 50
                    required:
                      - productName
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /products/{productId}/photos:
    put:
      summary: Update photos of a product
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          description: The ID of the product to update
          required: true
      requestBody:
        required: true
        description: An array of photo data with extensions of either .jpg, .png or .gif...FILE SIZE LIMITED TO 400KB
        content:
          multipart/formData:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - photos
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      productImgs:
                        type: array
                        items:
                          type: string
                    required:
                      - productImgs
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "413":
          description: File Size Too Large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "415":
          description: Unsupported File Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /ratings/{productId}:
    get:
      summary: Get a list of ratings for a product
      tags:
        - Ratings
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          description: ID of the product to which ratings apply
          required: true
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      productId:
                        type: integer
                        minimum: 1
                    required:
                      - productId
                  - $ref: "#/components/schemas/ratings"
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    post:
      summary: Add a new rating
      tags:
        - Ratings
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          description: ID of product to rate
          required: true
      requestBody:
        required: true
        description: Username and rating
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                rating:
                  type: integer
              required:
                - username
                - rating
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      productId:
                        type: integer
                        minimum: 1
                    required:
                      - productId
                  - $ref: "#/components/schemas/ratings"
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /comments/{productId}:
    post:
      summary: Post a new comment
      tags:
        - Comments
      parameters:
        - in: path
          required: true
          name: productId
          schema:
            type: integer
          description: ID of product to which the comment applies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    username:
                      $ref: "#/components/schemas/username"
                    comment:
                      type: string
                      minLength: 1
                      maxLength: 255
                  required:
                    - username
                    - comment
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      productId:
                        type: integer
                        format: int32
                        minimum: 1
                    required:
                      - productId
                  - $ref: "#/components/schemas/comments"
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /comments/{commentId}:
    delete:
      summary: Delete a comment
      tags:
        - Comments
      parameters:
        - in: path
          name: commentId
          required: true
          description: ID of the comment to delete
          schema:
            type: integer
      responses:
        "200":
          description: Successful Request
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      commentId:
                        type: integer
                        format: int32
                        minimum: 1
                    required:
                      - commentId
                  - $ref: "#/components/schemas/successStatusCode"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
